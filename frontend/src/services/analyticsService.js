import { API_URL } from '../config/constants';
import { calculateBusinessDays, calculateBusinessDaysByMonth, convertFrenchToISO } from '../utils/dateHelpers';

/**
 * Service pour tous les calculs analytiques du CA
 *
 * R√©cup√®re les donn√©es de deux sources :
 * 1. L'√©quipement du contexte (locations EN COURS avec tarifs actuels)
 * 2. L'API location-history (locations CL√îTUR√âES avec tarifs archiv√©s)
 */

export const analyticsService = {
  /**
   * Filtre les √©quipements TEST et locations CLIENT TEST
   * Exclut tout ce qui contient "TEST" dans le nom ou le client
   */
  filterTestData(equipmentList) {
    if (!equipmentList) return [];

    return equipmentList.filter(equipment => {
      // Exclure si le nom de l'√©quipement contient "TEST"
      if (equipment.nom && equipment.nom.toUpperCase().includes('TEST')) {
        return false;
      }

      // Exclure si le client est "CLIENT TEST"
      if (equipment.client && equipment.client.toUpperCase().includes('CLIENT TEST')) {
        return false;
      }

      return true;
    });
  },

  /**
   * Filtre les locations d'historique pour exclure les TEST
   * Exclut les locations avec client "CLIENT TEST"
   */
  filterTestLocations(locationHistory) {
    if (!locationHistory) return [];

    return locationHistory.filter(location => {
      // Exclure si le client est "CLIENT TEST"
      if (location.client && location.client.toUpperCase().includes('CLIENT TEST')) {
        return false;
      }

      return true;
    });
  },

  /**
   * R√©cup√®re l'historique de locations d'un √©quipement
   */
  async getEquipmentLocationHistory(equipmentId) {
    try {
      const response = await fetch(`${API_URL}/api/equipment/${equipmentId}/location-history`);
      if (!response.ok) return [];
      return response.json();
    } catch (error) {
      console.warn(`Erreur historique √©quipement ${equipmentId}:`, error);
      return [];
    }
  },

  /**
   * Calcule le CA estimatif d'une location EN COURS POUR UN MOIS SP√âCIFIQUE
   *
   * IMPORTANT: R√©partit correctement les jours quand une location chevauche plusieurs mois
   * Exemple: Location 25/09 au 09/10
   *   - Pour septembre: 4 jours (25, 26, 29, 30)
   *   - Pour octobre: 7 jours (1, 2, 3, 6, 7, 8, 9)
   *
   * @param {Object} equipment - L'√©quipement avec location
   * @param {number} month - Index du mois (0-11)
   * @param {number} year - L'ann√©e
   * @returns {number} CA estimatif pour ce mois uniquement
   */
  calculateCurrentLocationEstimatedCAByMonth(equipment, month, year) {
    if (equipment.statut !== 'En Location' || !equipment.debutLocation) {
      return 0;
    }

    const locationStart = new Date(convertFrenchToISO(equipment.debutLocation));

    // Si pas de date fin th√©orique, utiliser fin du mois demand√©
    let locationEnd = locationStart;
    if (equipment.finLocationTheorique) {
      locationEnd = new Date(convertFrenchToISO(equipment.finLocationTheorique));
    } else {
      // Pas de date fin th√©orique ‚Üí utiliser fin du mois
      locationEnd = new Date(year, month + 1, 0);
      console.log(`‚ö†Ô∏è  ${equipment.nom}: calculateCurrentLocationEstimatedCAByMonth - pas de finLocationTheorique, utilisation fin du mois`);
    }

    // Obtenir la r√©partition des jours par mois
    const startStr = locationStart.toISOString().split('T')[0];
    const endStr = locationEnd.toISOString().split('T')[0];
    const monthlyDays = calculateBusinessDaysByMonth(startStr, endStr);

    // Cl√© pour le mois cible
    const monthKey = `${year}-${String(month + 1).padStart(2, '0')}`;
    const businessDaysThisMonth = monthlyDays[monthKey] || 0;

    console.log(`üìä ${equipment.nom} | Mois ${monthKey} | ${businessDaysThisMonth} jours ouvr√©s`);

    if (businessDaysThisMonth === 0) return 0;

    // R√©cup√©rer le tarif
    let prixHT = equipment.prixHT || 0;
    if (!prixHT) return 0; // Sans tarif, pas de CA

    // Calcul du CA pour ce mois
    let ca = businessDaysThisMonth * prixHT;

    // IMPORTANT: La remise longue dur√©e s'applique sur la dur√©e TOTALE de la location, pas par mois
    const totalDays = calculateBusinessDays(startStr, endStr);
    if (totalDays >= 21) {
      ca = ca * 0.8; // Remise 20%
    }

    // IMPORTANT: Le minimum de facturation s'applique aussi sur la dur√©e TOTALE
    if (equipment.minimumFacturationApply && equipment.minimumFacturation) {
      // R√©partir le minimum proportionnellement aux jours du mois
      const minPerDay = equipment.minimumFacturation / totalDays;
      ca = Math.max(ca, businessDaysThisMonth * minPerDay);
    }

    return parseFloat(ca.toFixed(2));
  },

  /**
   * Calcule le CA estimatif d'une location EN COURS (version LEGACY - tout le mois)
   * Prend en compte : jours jusqu'√† fin du mois, tarif actuel, minimum facturation
   */
  calculateCurrentLocationEstimatedCA(equipment, month, year) {
    if (equipment.statut !== 'En Location' || !equipment.debutLocation || !equipment.finLocationTheorique) {
      return 0;
    }

    const monthStart = new Date(year, month, 1);
    const monthEnd = new Date(year, month + 1, 0);

    const locationStart = new Date(convertFrenchToISO(equipment.debutLocation));
    const locationEnd = new Date(convertFrenchToISO(equipment.finLocationTheorique));

    // Intersect avec le mois
    const rangeStart = new Date(Math.max(locationStart, monthStart));
    const rangeEnd = new Date(Math.min(locationEnd, monthEnd));

    if (rangeStart > rangeEnd) return 0;

    const startStr = rangeStart.toISOString().split('T')[0];
    const endStr = rangeEnd.toISOString().split('T')[0];

    const businessDays = calculateBusinessDays(startStr, endStr);

    console.log(`üìä ${equipment.nom} | ${startStr} √† ${endStr} | ${businessDays} jours ouvr√©s`);

    if (businessDays === null || businessDays === 0) return 0;

    // R√©cup√©rer le tarif (peut √™tre null)
    let prixHT = equipment.prixHT || 0;
    if (!prixHT) return 0; // Sans tarif, pas de CA

    // Appliquer remise longue dur√©e si applicable
    const isLongDuration = businessDays >= 21;
    let ca = businessDays * prixHT;

    if (isLongDuration) {
      ca = ca * 0.8; // Remise 20%
    }

    // Appliquer minimum facturation
    if (equipment.minimumFacturationApply && equipment.minimumFacturation) {
      ca = Math.max(ca, equipment.minimumFacturation);
    }

    return parseFloat(ca.toFixed(2));
  },

  /**
   * Calcule le CA confirm√© d'une location EN COURS POUR UN MOIS SP√âCIFIQUE
   *
   * IMPORTANT: R√©partit correctement les jours quand une location chevauche plusieurs mois
   * Ne compte que les jours D√âJ√Ä √âCOUL√âS (jours pass√©s, pas futurs)
   *
   * @param {Object} equipment - L'√©quipement avec location
   * @param {number} month - Index du mois (0-11)
   * @param {number} year - L'ann√©e
   * @returns {number} CA confirm√© pour ce mois uniquement
   */
  calculateCurrentLocationConfirmedCAByMonth(equipment, month, year) {
    if (equipment.statut !== 'En Location' || !equipment.debutLocation) {
      return 0;
    }

    const today = new Date();
    const locationStart = new Date(convertFrenchToISO(equipment.debutLocation));

    // Si pas de date fin th√©orique, utiliser fin du mois demand√© (coh√©rent avec estim√©)
    let locationEnd = today; // Par d√©faut, jusqu'√† aujourd'hui
    if (equipment.finLocationTheorique) {
      locationEnd = new Date(convertFrenchToISO(equipment.finLocationTheorique));
    } else {
      // Pas de date fin th√©orique ‚Üí jusqu'√† fin du mois demand√© si avant aujourd'hui
      const monthEnd = new Date(year, month + 1, 0);
      locationEnd = monthEnd < today ? monthEnd : today;
      console.log(`‚ö†Ô∏è  ${equipment.nom}: calculateCurrentLocationConfirmedCAByMonth - pas de finLocationTheorique, utilisation fin du mois ou aujourd'hui`);
    }

    // La fin r√©elle est le minimum entre fin th√©orique et aujourd'hui
    const realEnd = new Date(Math.min(today.getTime(), locationEnd.getTime()));

    // Obtenir la r√©partition des jours par mois (jusqu'√† realEnd)
    const startStr = locationStart.toISOString().split('T')[0];
    const endStr = realEnd.toISOString().split('T')[0];
    const monthlyDays = calculateBusinessDaysByMonth(startStr, endStr);

    // Cl√© pour le mois cible
    const monthKey = `${year}-${String(month + 1).padStart(2, '0')}`;
    const businessDaysThisMonth = monthlyDays[monthKey] || 0;

    console.log(`‚úÖ ${equipment.nom} (Confirm√©) | Mois ${monthKey} | ${businessDaysThisMonth} jours ouvr√©s`);

    if (businessDaysThisMonth === 0) return 0;

    // R√©cup√©rer le tarif
    let prixHT = equipment.prixHT || 0;
    if (!prixHT) return 0; // Sans tarif, pas de CA

    // Calcul du CA pour ce mois
    let ca = businessDaysThisMonth * prixHT;

    // IMPORTANT: La remise longue dur√©e s'applique sur la dur√©e TOTALE de la location jusqu'√† aujourd'hui
    const totalDays = calculateBusinessDays(startStr, endStr);
    if (totalDays >= 21) {
      ca = ca * 0.8; // Remise 20%
    }

    // IMPORTANT: Le minimum de facturation s'applique aussi sur la dur√©e TOTALE
    if (equipment.minimumFacturationApply && equipment.minimumFacturation) {
      // R√©partir le minimum proportionnellement aux jours du mois
      const minPerDay = equipment.minimumFacturation / totalDays;
      ca = Math.max(ca, businessDaysThisMonth * minPerDay);
    }

    return parseFloat(ca.toFixed(2));
  },

  /**
   * Calcule le CA confirm√© d'une location EN COURS (version LEGACY - tout le mois)
   * Prend en compte : jours D√âJ√Ä √âCOUL√âS uniquement
   */
  calculateCurrentLocationConfirmedCA(equipment, month, year) {
    if (equipment.statut !== 'En Location' || !equipment.debutLocation) {
      return 0;
    }

    const today = new Date();
    const monthStart = new Date(year, month, 1);
    const monthEnd = new Date(year, month + 1, 0);

    const locationStart = new Date(convertFrenchToISO(equipment.debutLocation));

    // Prendre le minimum entre : fin th√©orique, aujourd'hui, fin du mois
    const locationEnd = equipment.finLocationTheorique
      ? new Date(convertFrenchToISO(equipment.finLocationTheorique))
      : today;

    const realEnd = new Date(Math.min(today.getTime(), locationEnd.getTime()));

    // Intersect avec le mois
    const rangeStart = new Date(Math.max(locationStart, monthStart));
    const rangeEnd = new Date(Math.min(realEnd, monthEnd));

    if (rangeStart > rangeEnd) return 0;

    const startStr = rangeStart.toISOString().split('T')[0];
    const endStr = rangeEnd.toISOString().split('T')[0];

    const businessDays = calculateBusinessDays(startStr, endStr);

    console.log(`‚úÖ ${equipment.nom} (Confirm√©) | ${startStr} √† ${endStr} | ${businessDays} jours ouvr√©s`);

    if (businessDays === null || businessDays === 0) return 0;

    // R√©cup√©rer le tarif (peut √™tre null)
    let prixHT = equipment.prixHT || 0;
    if (!prixHT) return 0; // Sans tarif, pas de CA

    // Appliquer remise longue dur√©e
    const isLongDuration = businessDays >= 21;
    let ca = businessDays * prixHT;

    if (isLongDuration) {
      ca = ca * 0.8; // Remise 20%
    }

    // Appliquer minimum facturation
    if (equipment.minimumFacturationApply && equipment.minimumFacturation) {
      ca = Math.max(ca, equipment.minimumFacturation);
    }

    return parseFloat(ca.toFixed(2));
  },

  /**
   * Calcule le CA du mois depuis l'historique ARCHIV√â avec d√©tails COMPLETS
   * (locations cl√¥tur√©es dans le mois donn√©)
   * Retourne: { totalCA, count, locations }
   * Exclut automatiquement les locations avec CLIENT TEST
   */
  calculateHistoricalMonthlyCAWithDetails(locationHistory, month, year) {
    // Filtrer les TEST locations
    const filteredHistory = this.filterTestLocations(locationHistory);

    if (!filteredHistory || filteredHistory.length === 0) {
      return { totalCA: 0, count: 0, locations: [] };
    }

    const monthStart = new Date(year, month, 1);
    const monthEnd = new Date(year, month + 1, 0);

    let totalCA = 0;
    const locations = [];

    filteredHistory.forEach(location => {
      // Utiliser la date de retour r√©elle ou rentr√©e
      const returnDateStr = location.date_retour_reel || location.rentre_le;
      if (!returnDateStr) return;

      const returnDate = new Date(returnDateStr);

      // La location a √©t√© cl√¥tur√©e ce mois-ci
      if (returnDate >= monthStart && returnDate <= monthEnd) {
        if (location.ca_total_ht) {
          totalCA += parseFloat(location.ca_total_ht);
          locations.push(location);
        }
      }
    });

    return {
      totalCA: parseFloat(totalCA.toFixed(2)),
      count: locations.length,
      locations
    };
  },

  /**
   * Calcule le CA du mois depuis l'historique ARCHIV√â
   * (locations cl√¥tur√©es dans le mois donn√©)
   * Exclut automatiquement les locations avec CLIENT TEST
   */
  calculateHistoricalMonthlyCA(locationHistory, month, year) {
    const result = this.calculateHistoricalMonthlyCAWithDetails(locationHistory, month, year);
    return result.totalCA;
  },

  /**
   * Calcule le CA total confirm√© de l'ann√©e en cours
   */
  calculateYearlyConfirmedCA(caData, year) {
    let totalCA = 0;
    const monthsForYear = [];

    for (const [key, data] of Object.entries(caData)) {
      const [monthYear] = key.split('-');
      const dataYear = parseInt(monthYear);

      if (dataYear === year) {
        monthsForYear.push(key);
        // Pour le mois courant: utiliser CA confirm√©
        if (data.isCurrent) {
          totalCA += data.confirmedCA || 0;
        } else {
          // Pour les mois pass√©s: utiliser l'historique
          totalCA += data.historicalCA || 0;
        }
      }
    }

    console.log(`üí∞ CA annuel ${year}: ${monthsForYear.length} mois trouv√©s (${monthsForYear.join(', ')}) = ${totalCA}‚Ç¨`);

    return parseFloat(totalCA.toFixed(2));
  },

  /**
   * R√©cup√®re et agr√®ge les donn√©es CA pour tous les mois
   * Combine historique (mois pass√©s) + locations en cours (mois actuel)
   * Exclut automatiquement TEST equipment et CLIENT TEST
   */
  async getAllMonthsCAData(equipmentList) {
    // Filtrer les donn√©es TEST
    const filteredEquipmentList = this.filterTestData(equipmentList);

    if (!filteredEquipmentList || filteredEquipmentList.length === 0) {
      return {};
    }

    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth();

    const caData = {};

    // R√©cup√®re l'historique pour TOUS les √©quipements
    console.log(`üìä R√©cup√©ration historique pour ${filteredEquipmentList.length} √©quipements...`);
    const allHistory = [];

    for (const equipment of filteredEquipmentList) {
      const history = await this.getEquipmentLocationHistory(equipment.id);
      if (history && history.length > 0) {
        // Filtrer les locations CLIENT TEST (s√©curit√© suppl√©mentaire)
        const filteredHistory = this.filterTestLocations(history);
        allHistory.push(...filteredHistory);
      }
    }

    console.log(`‚úÖ ${allHistory.length} locations historiques trouv√©es (TEST exclus)`);

    // Parcourt tous les mois depuis le d√©but de l'ann√©e pr√©c√©dente
    for (let year = currentYear - 1; year <= currentYear; year++) {
      for (let month = 0; month < 12; month++) {
        const monthDate = new Date(year, month, 1);

        // Ne pas aller dans le futur
        if (monthDate > today) break;

        const key = `${year}-${String(month + 1).padStart(2, '0')}`;

        if (month === currentMonth && year === currentYear) {
          // üî¥ MOIS ACTUEL : Combiner historique + locations en cours
          const historicalCA = this.calculateHistoricalMonthlyCA(allHistory, month, year);

          let estimatedCA = 0;
          let confirmedCA = 0;
          let activeLocations = 0;

          // Ajouter les locations en cours du mois (avec r√©partition correcte des jours multi-mois)
          filteredEquipmentList.forEach(equipment => {
            // Accepter les locations AVEC ou SANS finLocationTheorique (gestion coh√©rente)
            if (equipment.statut === 'En Location' && equipment.debutLocation) {
              const locationStart = new Date(convertFrenchToISO(equipment.debutLocation));

              // Si pas de date fin th√©orique, utiliser fin du mois demand√©
              let locationEnd = equipment.finLocationTheorique
                ? new Date(convertFrenchToISO(equipment.finLocationTheorique))
                : new Date(year, month + 1, 0);

              const monthStart = new Date(year, month, 1);
              const monthEnd = new Date(year, month + 1, 0);

              // V√©rifier si la location chevauche le mois
              if (locationStart <= monthEnd && locationEnd >= monthStart) {
                // UTILISER LES NOUVELLES FONCTIONS AVEC R√âPARTITION PAR MOIS
                const locEstimated = this.calculateCurrentLocationEstimatedCAByMonth(equipment, month, year);
                const locConfirmed = this.calculateCurrentLocationConfirmedCAByMonth(equipment, month, year);

                // COMPTER TOUTES LES LOCATIONS ACTIVES, m√™me sans tarif
                activeLocations++;
                estimatedCA += locEstimated;
                confirmedCA += locConfirmed;
              }
            }
          });

          // Total = historique du mois + locations en cours du mois
          caData[key] = {
            estimatedCA: parseFloat((historicalCA + estimatedCA).toFixed(2)),
            confirmedCA: parseFloat((historicalCA + confirmedCA).toFixed(2)),
            isCurrent: true,
            month: month,
            year: year,
            activeLocations: activeLocations
          };

          console.log(`Mois actuel ${key}: Historique=${historicalCA}‚Ç¨, Estim√©=${estimatedCA}‚Ç¨, Confirm√©=${confirmedCA}‚Ç¨`);
        } else {
          // ‚ö™ MOIS PASS√âS : Uniquement historique
          const historicalCA = this.calculateHistoricalMonthlyCA(allHistory, month, year);

          caData[key] = {
            historicalCA: historicalCA,
            isCurrent: false,
            month: month,
            year: year
          };

          if (historicalCA > 0) {
            console.log(`Mois pass√© ${key}: ${historicalCA}‚Ç¨`);
          }
        }
      }
    }

    return caData;
  },

  /**
   * Calcule les stats enrichies pour les KPIs du mois s√©lectionn√©
   * Combine l'historique archiv√© + les locations en cours (pour coh√©rence avec le graphique)
   * Exclut automatiquement TEST equipment et CLIENT TEST
   */
  async calculateMonthStats(equipmentList, month, year) {
    // Filtrer les donn√©es TEST
    const filteredEquipmentList = this.filterTestData(equipmentList);

    let estimatedCA = 0;
    let confirmedCA = 0;
    let activeLocations = 0;
    let totalDays = 0;

    const monthStart = new Date(year, month, 1);
    const monthEnd = new Date(year, month + 1, 0);

    // R√©cup√©rer l'historique (locations cl√¥tur√©es)
    const allHistory = [];
    for (const equipment of filteredEquipmentList) {
      const history = await this.getEquipmentLocationHistory(equipment.id);
      if (history && history.length > 0) {
        // Filtrer les locations CLIENT TEST (s√©curit√© suppl√©mentaire)
        const filteredHistory = this.filterTestLocations(history);
        allHistory.push(...filteredHistory);
      }
    }

    // Ajouter le CA de l'historique (locations cl√¥tur√©es ce mois)
    const historicalData = this.calculateHistoricalMonthlyCAWithDetails(allHistory, month, year);
    const historicalCA = historicalData.totalCA;
    const historicalLocationsCount = historicalData.count;
    estimatedCA += historicalCA;
    confirmedCA += historicalCA;

    // Parcourir les locations en cours (avec r√©partition correcte des jours multi-mois)
    filteredEquipmentList.forEach(equipment => {
      // Accepter les locations AVEC ou SANS finLocationTheorique (gestion coh√©rente avec getMonthLocationBreakdown)
      if (equipment.statut === 'En Location' && equipment.debutLocation) {
        const locationStart = new Date(convertFrenchToISO(equipment.debutLocation));

        // Si pas de date fin th√©orique, utiliser fin du mois demand√© (coh√©rent avec getMonthLocationBreakdown)
        let locationEnd = locationStart;
        if (equipment.finLocationTheorique) {
          locationEnd = new Date(convertFrenchToISO(equipment.finLocationTheorique));
        } else {
          // Pas de date fin ‚Üí utiliser fin du mois demand√©
          locationEnd = monthEnd;
          console.log(`‚ö†Ô∏è  ${equipment.nom}: pas de finLocationTheorique, utilisation fin du mois`);
        }

        // V√©rifier si la location chevauche le mois
        if (locationStart <= monthEnd && locationEnd >= monthStart) {
          // Calcul de la dur√©e (pour toutes les locations, avec ou sans tarif)
          const rangeStart = new Date(Math.max(locationStart, monthStart));
          const rangeEnd = new Date(Math.min(locationEnd, monthEnd));

          const businessDays = calculateBusinessDays(
            rangeStart.toISOString().split('T')[0],
            rangeEnd.toISOString().split('T')[0]
          );

          // COMPTER TOUTES LES LOCATIONS ACTIVES, m√™me sans tarif
          if (businessDays && businessDays > 0) {
            activeLocations++;
            totalDays += businessDays;

            // Calcul CA avec R√âPARTITION PAR MOIS (seulement si la location a un tarif)
            const locEstimated = this.calculateCurrentLocationEstimatedCAByMonth(equipment, month, year);
            const locConfirmed = this.calculateCurrentLocationConfirmedCAByMonth(equipment, month, year);

            console.log(`üìç ${equipment.nom} | Tarif: ${equipment.prixHT}‚Ç¨/j | Estim√©: ${locEstimated}‚Ç¨ | Confirm√©: ${locConfirmed}‚Ç¨`);

            estimatedCA += locEstimated;
            confirmedCA += locConfirmed;
          }
        }
      }
    });

    const avgDaysPerLocation = activeLocations > 0 ? Math.round(totalDays / activeLocations) : 0;

    console.log(`\n‚úÖ TOTAL MOIS: Historique=${historicalCA}‚Ç¨ (${historicalLocationsCount} locations) | Estim√© Total=${estimatedCA}‚Ç¨ | Confirm√© Total=${confirmedCA}‚Ç¨\n`);

    return {
      estimatedCA: parseFloat(estimatedCA.toFixed(2)),
      confirmedCA: parseFloat(confirmedCA.toFixed(2)),
      activeLocations,
      avgDaysPerLocation,
      historicalCA: parseFloat(historicalCA.toFixed(2)),
      historicalLocationsCount,
      historicalLocations: historicalData.locations
    };
  },

  // R√©cup√®re le d√©tail complet des locations pour un mois (ferm√©es + en cours)
  async getMonthLocationBreakdown(equipmentData, month, year) {
    console.log(`üîç getMonthLocationBreakdown appel√© pour ${year}-${String(month + 1).padStart(2, '0')}`);
    const { calculateBusinessDays, calculateBusinessDaysByMonth } = await import('../utils/dateHelpers');

    const monthKey = `${year}-${String(month + 1).padStart(2, '0')}`;
    const today = new Date();
    const isCurrentMonth = month === today.getMonth() && year === today.getFullYear();

    const closedLocations = [];
    const ongoingLocations = [];

    // 1. R√©cup√©rer les locations en cours (equipments)
    const filteredEquipment = this.filterTestData(equipmentData);
    const equipmentInLocation = filteredEquipment.filter(e => e.statut === 'En Location');
    console.log(`   üì¶ Total √©quipements en location: ${equipmentInLocation.length}`);

    for (const equipment of filteredEquipment) {
      // V√©rifier si l'√©quipement est en location le mois demand√©
      if (equipment.statut !== 'En Location') continue;

      if (!equipment.debutLocation) {
        console.log(`   ‚ö†Ô∏è  ${equipment.nom}: date de d√©but manquante`);
        continue;
      }

      // Si pas de date fin th√©orique mais EN LOCATION, c'est une location non termin√©e/ind√©finie
      // On va la compter jusqu'√† fin du mois demand√©

      // Parser les dates correctement (peuvent √™tre en format fran√ßais DD/MM/YYYY ou ISO YYYY-MM-DD)
      let startDate = equipment.debutLocation;
      let endDate = equipment.finLocationTheorique;

      // Convertir format fran√ßais DD/MM/YYYY en ISO YYYY-MM-DD si n√©cessaire
      if (startDate && startDate.includes('/')) {
        const [day, month, year] = startDate.split('/');
        startDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      } else if (startDate && startDate.includes('T')) {
        startDate = startDate.split('T')[0];
      }

      if (endDate && endDate.includes('/')) {
        const [day, month, year] = endDate.split('/');
        endDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      } else if (endDate && endDate.includes('T')) {
        endDate = endDate.split('T')[0];
      }

      // V√©rifier si cette location chevauche le mois demand√©
      const startMonth = startDate.substring(0, 7);

      // Si pas de date fin, consid√©rer que la location est ind√©finie/en cours ‚Üí utiliser fin du mois
      let effectiveEndDate = endDate;
      if (!endDate) {
        const monthEnd = new Date(year, month + 1, 0);
        effectiveEndDate = monthEnd.toISOString().split('T')[0];
        console.log(`   ‚ö†Ô∏è  ${equipment.nom}: pas de date fin th√©orique! Utilisation fin du mois: ${effectiveEndDate}`);
      }

      const endMonth = effectiveEndDate.substring(0, 7);

      if (monthKey < startMonth || monthKey > endMonth) {
        console.log(`   ‚ùå ${equipment.nom}: ne chevauche pas ${monthKey} (${startMonth} √† ${endMonth})`);
        continue;
      }

      console.log(`   ‚úÖ Location en cours trouv√©e pour ${monthKey}: ${equipment.nom} (${equipment.client})`);

      // IMPORTANT: Si la location a d√©pass√© sa date th√©orique, utiliser la date r√©elle (fin du mois)
      const today = new Date();
      if (endDate) { // Seulement si on a une date th√©orique √† comparer
        const theoreticalEndDate = new Date(endDate);
        if (theoreticalEndDate < today) {
          // La location a d√©pass√© sa date th√©orique ‚Üí utiliser fin du mois
          const monthEnd = new Date(year, month + 1, 0);
          effectiveEndDate = monthEnd.toISOString().split('T')[0];
          console.log(`   ‚ö†Ô∏è  ${equipment.nom}: d√©passement! Fin th√©orique: ${endDate}, fin r√©elle: ${effectiveEndDate}`);
        }
      }

      // Calculer les jours ouvr√©s par mois pour cette location
      const totalBusinessDays = calculateBusinessDays(startDate, effectiveEndDate);
      const businessDaysByMonth = calculateBusinessDaysByMonth(startDate, effectiveEndDate);
      const businessDaysThisMonth = businessDaysByMonth[monthKey] || 0;

      if (businessDaysThisMonth === 0) continue;

      // Calculer le nombre de jours confirmes (jusqu'√† aujourd'hui ou fin du mois si d√©passement)
      const realEndForConfirmed = isCurrentMonth
        ? new Date().toISOString().split('T')[0]
        : effectiveEndDate;

      const businessDaysByMonthConfirmed = calculateBusinessDaysByMonth(startDate, realEndForConfirmed);
      const businessDaysConfirmedThisMonth = businessDaysByMonthConfirmed[monthKey] || 0;

      // Jours estim√©s restants = jours totaux - jours confirm√©s
      const businessDaysEstimatedRemaining = businessDaysThisMonth - businessDaysConfirmedThisMonth;

      // Appliquer les calculs de CA
      const dailyRate = parseFloat(equipment.prixHT) || 0;
      const hasLongDurationDiscount = totalBusinessDays >= 21;
      const hasMinimumBilling = equipment.minimumFacturationApply && equipment.minimumFacturation;

      // CA Confirm√© pour ce mois
      let caConfirmedThisMonth = businessDaysConfirmedThisMonth * dailyRate;
      if (hasLongDurationDiscount) caConfirmedThisMonth *= 0.8;
      if (hasMinimumBilling) {
        const minPerDay = equipment.minimumFacturation / totalBusinessDays;
        caConfirmedThisMonth = Math.max(caConfirmedThisMonth, businessDaysConfirmedThisMonth * minPerDay);
      }

      // CA Estim√© pour ce mois (confirm√© + estim√© futur)
      let caEstimatedThisMonth = businessDaysThisMonth * dailyRate;
      if (hasLongDurationDiscount) caEstimatedThisMonth *= 0.8;
      if (hasMinimumBilling) {
        const minPerDay = equipment.minimumFacturation / totalBusinessDays;
        caEstimatedThisMonth = Math.max(caEstimatedThisMonth, businessDaysThisMonth * minPerDay);
      }

      console.log(`   üì¶ Equipment: ${equipment.id} - nom: ${equipment.nom}, designation: ${equipment.designation}`);

      ongoingLocations.push({
        id: equipment.id,
        client: equipment.client || 'N/A',
        designation: equipment.designation || equipment.nom || 'N/A',
        cmu: equipment.cmu || '',
        modele: equipment.modele || '',
        marque: equipment.marque || '',
        startDate,
        endDateTheoretical: endDate,
        endDateEffective: effectiveEndDate,
        hasNoEndDate: !endDate,
        businessDaysConfirmedThisMonth,
        businessDaysEstimatedRemaining,
        businessDaysThisMonth,
        totalBusinessDaysPlanned: totalBusinessDays,
        dailyRate,
        discount20Applied: hasLongDurationDiscount,
        minBillingApplied: hasMinimumBilling,
        caConfirmedThisMonth: parseFloat(caConfirmedThisMonth.toFixed(2)),
        caEstimatedThisMonth: parseFloat(caEstimatedThisMonth.toFixed(2)),
        status: 'ongoing'
      });
    }

    // 2. R√©cup√©rer les locations ferm√©es ce mois (location_history)
    // Fetch location history from all equipment
    const allHistoricalLocations = [];
    for (const equipment of filteredEquipment) {
      const history = await this.getEquipmentLocationHistory(equipment.id);
      if (history && history.length > 0) {
        // Filtrer les locations CLIENT TEST (s√©curit√© suppl√©mentaire)
        const filteredHistory = this.filterTestLocations(history);
        // Ajouter l'ID de l'√©quipement et ses d√©tails √† chaque location
        for (const loc of filteredHistory) {
          allHistoricalLocations.push({
            ...loc,
            equipment_designation: equipment.designation || equipment.nom || 'N/A',
            cmu: equipment.cmu || '',
            modele: equipment.modele || '',
            marque: equipment.marque || ''
          });
        }
      }
    }

    console.log(`   üìã Total locations ferm√©es trouv√©es (TEST exclus): ${allHistoricalLocations.length}`);

    for (const location of allHistoricalLocations) {
      // Parser les dates correctement (peuvent √™tre en format fran√ßais DD/MM/YYYY ou ISO YYYY-MM-DD)
      let startDate = location.date_debut;
      let endDate = (location.date_retour_reel || location.date_fin_theorique);

      // Convertir format fran√ßais DD/MM/YYYY en ISO YYYY-MM-DD si n√©cessaire
      if (startDate && startDate.includes('/')) {
        const [day, month, year] = startDate.split('/');
        startDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      } else if (startDate && startDate.includes('T')) {
        startDate = startDate.split('T')[0];
      }

      if (endDate && endDate.includes('/')) {
        const [day, month, year] = endDate.split('/');
        endDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      } else if (endDate && endDate.includes('T')) {
        endDate = endDate.split('T')[0];
      }

      const endDateStr = endDate;

      // V√©rifier si cette location chevauche le mois demand√©
      const startMonth = startDate.substring(0, 7);
      const endMonth = endDateStr.substring(0, 7);

      if (monthKey < startMonth || monthKey > endMonth) {
        continue;
      }

      const totalBusinessDays = calculateBusinessDays(startDate, endDateStr);
      const businessDaysByMonth = calculateBusinessDaysByMonth(startDate, endDateStr);
      const businessDaysThisMonth = businessDaysByMonth[monthKey] || 0;

      if (businessDaysThisMonth === 0) continue;

      const dailyRate = parseFloat(location.prix_ht_jour) || 0;
      const hasLongDurationDiscount = location.remise_ld === true;

      // Pour une location ferm√©e, CA confirm√© = CA total pour ce mois
      let caThisMonth = businessDaysThisMonth * dailyRate;
      if (hasLongDurationDiscount) caThisMonth *= 0.8;

      closedLocations.push({
        id: location.id,
        client: location.client || 'N/A',
        designation: location.equipment_designation || 'N/A',
        cmu: location.cmu || '',
        modele: location.modele || '',
        marque: location.marque || '',
        startDate,
        endDate: endDateStr,
        businessDaysThisMonth,
        totalBusinessDays,
        dailyRate,
        discount20Applied: hasLongDurationDiscount,
        caThisMonth: parseFloat(caThisMonth.toFixed(2)),
        status: 'closed'
      });
    }

    // 3. Retourner les donn√©es structur√©es
    const totalCAConfirmed = ongoingLocations.reduce((sum, loc) => sum + loc.caConfirmedThisMonth, 0) +
                             closedLocations.reduce((sum, loc) => sum + loc.caThisMonth, 0);

    const totalCAEstimated = ongoingLocations.reduce((sum, loc) => sum + loc.caEstimatedThisMonth, 0) +
                             closedLocations.reduce((sum, loc) => sum + loc.caThisMonth, 0);

    console.log(`üìä Breakdown ${monthKey}: ${ongoingLocations.length} en cours + ${closedLocations.length} ferm√©es = ${ongoingLocations.length + closedLocations.length} total`);

    return {
      closedLocations,
      ongoingLocations,
      summary: {
        totalCAConfirmed: parseFloat(totalCAConfirmed.toFixed(2)),
        totalCAEstimated: parseFloat(totalCAEstimated.toFixed(2)),
        closedCount: closedLocations.length,
        ongoingCount: ongoingLocations.length
      }
    };
  }
};

export default analyticsService;
