import pg from "pg";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import readline from "readline";

const { Pool } = pg;

// __dirname en ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// üîß Chargement de la configuration d'environnement
const NODE_ENV = process.env.NODE_ENV || 'development';

// Charger le fichier .env correspondant
let envFile = '.env.development'; // Par d√©faut
if (NODE_ENV === 'production') {
  envFile = '.env.production';
} else if (NODE_ENV === 'work') {
  envFile = '.env.work';
}

const envPath = path.join(__dirname, '..', envFile);
dotenv.config({ path: envPath });

// üé® Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m',
  cyan: '\x1b[36m'
};

// üîê Protection PRODUCTION
if (NODE_ENV === 'production') {
  console.log(colors.red + colors.bright + '\n‚ùå ERREUR: Impossible de r√©initialiser la base de donn√©es PRODUCTION !' + colors.reset);
  console.log(colors.yellow + '‚ö†Ô∏è  Pour des raisons de s√©curit√©, cette op√©ration est bloqu√©e en production.' + colors.reset);
  console.log(colors.cyan + '‚ÑπÔ∏è  Utilisez NODE_ENV=development ou NODE_ENV=work pour r√©initialiser une base locale.\n' + colors.reset);
  process.exit(1);
}

// üìä Configuration de la base de donn√©es
const dbConfig = {
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false
};

// Fonction pour poser une question √† l'utilisateur
function askQuestion(query) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise(resolve => rl.question(query, answer => {
    rl.close();
    resolve(answer);
  }));
}

// Fonction principale de r√©initialisation
async function resetDatabase() {
  console.log('\n' + colors.bright + colors.cyan + '‚ïê'.repeat(70) + colors.reset);
  console.log(colors.bright + colors.cyan + '  üîÑ MAGILOC - R√âINITIALISATION BASE DE DONN√âES' + colors.reset);
  console.log(colors.bright + colors.cyan + '‚ïê'.repeat(70) + colors.reset);

  console.log(colors.bright + '\n  Environnement:' + colors.reset + ' ' +
    (NODE_ENV === 'work' ? colors.yellow + 'üü° WORK (Local)' : colors.green + 'üü¢ DEVELOPMENT (Local)') + colors.reset);
  console.log(colors.bright + '  Base de donn√©es:' + colors.reset + ' ' + colors.red + dbConfig.database + colors.reset);
  console.log(colors.bright + '  H√¥te:' + colors.reset + ' ' + colors.blue + dbConfig.host + ':' + dbConfig.port + colors.reset);

  console.log(colors.bright + colors.red + '\n‚ö†Ô∏è  ATTENTION: Cette op√©ration va SUPPRIMER toutes les donn√©es !' + colors.reset);
  console.log(colors.yellow + '   - Toutes les tables seront recr√©√©es' + colors.reset);
  console.log(colors.yellow + '   - Toutes les donn√©es seront perdues' + colors.reset);
  console.log(colors.yellow + '   - Cette action est IRR√âVERSIBLE\n' + colors.reset);

  const answer = await askQuestion(colors.bright + 'Voulez-vous vraiment continuer ? (tapez "OUI" pour confirmer) : ' + colors.reset);

  if (answer.trim().toUpperCase() !== 'OUI') {
    console.log(colors.yellow + '\n‚úã Op√©ration annul√©e par l\'utilisateur.\n' + colors.reset);
    process.exit(0);
  }

  const pool = new Pool(dbConfig);

  try {
    console.log(colors.cyan + '\nüîå Connexion √† la base de donn√©es...' + colors.reset);
    await pool.connect();

    // Suppression de toutes les tables
    console.log(colors.cyan + 'üóëÔ∏è  Suppression des tables existantes...' + colors.reset);
    await pool.query(`
      DROP TABLE IF EXISTS maintenance_history CASCADE;
      DROP TABLE IF EXISTS location_history CASCADE;
      DROP TABLE IF EXISTS locations CASCADE;
      DROP TABLE IF EXISTS equipments CASCADE;
    `);
    console.log(colors.green + '‚úì Tables supprim√©es' + colors.reset);

    // Lecture et ex√©cution du sch√©ma
    console.log(colors.cyan + 'üìú Chargement du sch√©ma...' + colors.reset);
    const schemaPath = path.join(__dirname, 'database', 'schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');

    console.log(colors.cyan + 'üèóÔ∏è  Cr√©ation des tables...' + colors.reset);
    await pool.query(schema);
    console.log(colors.green + '‚úì Tables cr√©√©es avec succ√®s' + colors.reset);

    // V√©rification
    const result = await pool.query(`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      ORDER BY table_name;
    `);

    console.log(colors.green + '\n‚úÖ Base de donn√©es r√©initialis√©e avec succ√®s !' + colors.reset);
    console.log(colors.cyan + '\nTables cr√©√©es:' + colors.reset);
    result.rows.forEach(row => {
      console.log(colors.blue + '  ‚Ä¢ ' + row.table_name + colors.reset);
    });

    console.log(colors.bright + colors.cyan + '\n‚ïê'.repeat(70) + colors.reset + '\n');

  } catch (err) {
    console.error(colors.red + '\n‚ùå Erreur lors de la r√©initialisation:' + colors.reset);
    console.error(colors.red + err.message + colors.reset + '\n');
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// Ex√©cution
resetDatabase();
