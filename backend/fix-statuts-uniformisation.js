import pg from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const { Pool } = pg;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function fixStatuts() {
  const client = await pool.connect();

  try {
    console.log('\nüîß === UNIFORMISATION DES STATUTS ===\n');

    // 1. V√©rifier les statuts actuels
    console.log('üìä Analyse des statuts actuels...');
    const statuts = await client.query(`
      SELECT statut, COUNT(*) as count
      FROM equipments
      GROUP BY statut
      ORDER BY statut
    `);

    console.log('\nStatuts trouv√©s:');
    statuts.rows.forEach(row => {
      console.log(`  - "${row.statut}": ${row.count} √©quipement(s)`);
    });

    // 2. Uniformiser SUR PARC ‚Üí Sur Parc
    console.log('\nüîÑ Uniformisation "SUR PARC" ‚Üí "Sur Parc"...');
    const resultSurParc = await client.query(`
      UPDATE equipments
      SET statut = 'Sur Parc'
      WHERE statut = 'SUR PARC' OR statut = 'sur parc' OR statut ILIKE 'sur%parc'
    `);
    console.log(`‚úÖ ${resultSurParc.rowCount} √©quipement(s) mis √† jour`);

    // 3. Uniformiser EN LOCATION ‚Üí En Location
    console.log('\nüîÑ Uniformisation variations "En Location"...');
    const resultLocation = await client.query(`
      UPDATE equipments
      SET statut = 'En Location'
      WHERE statut ILIKE 'en%location' AND statut != 'En Location'
    `);
    console.log(`‚úÖ ${resultLocation.rowCount} √©quipement(s) mis √† jour`);

    // 4. Uniformiser EN MAINTENANCE ‚Üí En Maintenance
    console.log('\nüîÑ Uniformisation variations "En Maintenance"...');
    const resultMaintenance = await client.query(`
      UPDATE equipments
      SET statut = 'En Maintenance'
      WHERE statut ILIKE 'en%maintenance' AND statut != 'En Maintenance'
    `);
    console.log(`‚úÖ ${resultMaintenance.rowCount} √©quipement(s) mis √† jour`);

    // 5. Uniformiser EN R√âSERVATION ‚Üí En R√©servation
    console.log('\nüîÑ Uniformisation variations "En R√©servation"...');
    const resultReservation = await client.query(`
      UPDATE equipments
      SET statut = 'En R√©servation'
      WHERE (statut ILIKE 'en%offre%prix' OR statut ILIKE 'en%r_servation') AND statut != 'En R√©servation'
    `);
    console.log(`‚úÖ ${resultReservation.rowCount} √©quipement(s) mis √† jour`);

    // 6. Afficher les statuts finaux
    console.log('\nüìä Statuts apr√®s uniformisation:');
    const finalStatuts = await client.query(`
      SELECT statut, COUNT(*) as count
      FROM equipments
      GROUP BY statut
      ORDER BY statut
    `);

    finalStatuts.rows.forEach(row => {
      console.log(`  - "${row.statut}": ${row.count} √©quipement(s)`);
    });

    // 7. V√©rifier les statuts NULL ou vides
    const nullStatuts = await client.query(`
      SELECT id, designation, cmu
      FROM equipments
      WHERE statut IS NULL OR statut = ''
    `);

    if (nullStatuts.rowCount > 0) {
      console.log(`\n‚ö†Ô∏è  ${nullStatuts.rowCount} √©quipement(s) sans statut:`);
      nullStatuts.rows.forEach(row => {
        console.log(`  - ID ${row.id}: ${row.designation} ${row.cmu}`);
      });
      console.log('\nüîÑ Attribution du statut "Sur Parc" par d√©faut...');
      await client.query(`
        UPDATE equipments
        SET statut = 'Sur Parc'
        WHERE statut IS NULL OR statut = ''
      `);
      console.log('‚úÖ Statuts par d√©faut attribu√©s');
    } else {
      console.log('\n‚úÖ Aucun √©quipement sans statut');
    }

    console.log('\n‚úÖ === UNIFORMISATION TERMIN√âE ===\n');

  } catch (err) {
    console.error('‚ùå Erreur:', err.message);
    throw err;
  } finally {
    client.release();
    await pool.end();
  }
}

fixStatuts();
